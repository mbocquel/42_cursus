Je dois alouer l'espace de mon buffer avec malloc.

je vais utiliser la fonction read pour recuperer et stocker dans le buffer tout ce que j'arrive a prendre

je stocke ensuite le buffer dans une liste chainer et j'analyse si dans l'element que je viens de creer j'ai un retour a la ligne et si oui ou.

quand j'ai un retour a la ligne, je vais parcourir ma liste chainer en entier jusqua ce que j'arrive a l'element avec le retour a la ligne. 
A chaque fois je vais calculer la taille de ma ligne (donc en gros la somme des data de chaque elements jusqua celui avec le retour a la ligne)

puis je vais concatener tous ces trucs pour creer ma ligne. 

enfin je vais netoyer ma reserve en supprimant les elements avant celui qui a un retour a la ligne. pour celui qui a le retour a la ligne je vais modifier
les donnees pour retirer les elenents qui sont avant, puis je vais reinitialiser l'indicateur qui me dit qu'il y a un retour a la ligne (je refais un test sur la position).

je relance read pour continuer a avancer dans le fichier. 

initie la liste chainer de en static reserve
malloc le buffer
on regarde si on a deja un element dans la reserve avec un retour a la ligne (possible si on lit en une fois plusieurs lignes) ==> si c'est le cas il faut
direct passer a make la ligne.  
read(fd, buffer, buffer size) (boucle avec tant que read renvoie autre chose que zero.)
	Analyse le buffer
	==> ajoute les elements a la liste chainer
	==> analyse l'element pour regarder si il y a un retour a la ligne dedans. 
		==> si oui 
			fabrique la ligne
			netoie la reserve. 
			return la ligne. 
		==> Si non, refait un tour de boucle 



fonctions a faire :

analyse le buffer : ==> Prend en entree le buffer et l'adresse de debut liste chainer.
	Ajoute le buffer a la liste chainer
	regarde si il y a un retour a la ligne dans le dernier element ajouter. 
	renvoie une valeur qui indique si oui ou non il y a eu un retour a la ligne dans les elements. 

size ligne ==> l'adresse de la liste chainee. renvoie la taille de la liste. 

make_ligne => prend en entree l'adresse de la liste chainer. renvoie la chaine de caractere bien alloue en memoire
	recupere la taille de la ligne avec size_line
	alloue la memoire pour la bonne taille
	parcour la liste chainer pour ajouter les elements a la chaine de caractere alouee.
	renvoie la chaine de caractere finaliser.

clean_reserve ==> recupere l'adresse de la liste chaine. ne renvoie rien
	sauvegarde l'adresse de depart
	parcours la liste chainee elemets par elenents. 
		si ils ont pas le caractere de fin, ca les free et ca defini l'element suivant comme debut de la liste.
		si il y a le caractere de new ligne, ca supprime tout ce qui est avant dans la chaine de caractere. 
		ca refait le test pour voir si il y a un caractere de retour a la ligne dans le buffer. 

		



