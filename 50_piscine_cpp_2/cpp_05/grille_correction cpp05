
Exercise 00: Mommy, when I grow up, I want to be a bureaucrat!
As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.

Bureaucrat
There is a Makefile that compiles using the appropriate flags.
There is a Bureaucrat class. It has a constant name.
It has a grade that ranges from 1 (highest) to 150 (lowest).
Exceptions are thrown if you try to create a Bureaucrat with a grade
that is too high or too low.
There are accessors for the attributes.
There are functions to increment / decrement the grade,
They throw exceptions when it's appropriate. Remember that incrementing a
grade 3 will give you a grade 2 (1 is the highest).
The exceptions that are used inherit from std::exception, or from
something derived from std::exception (i.e. they are catchable as
std::exception & e).
There is a << operator to ostream overload that outputs the info of the
Bureaucrat.

Exercise 01: Form up, maggots!
As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.

Form
There is a Makefile that compiles using the appropriate flags.
There is a Form class.
It has a name, a bool that indicates whether is it signed (at the
beginning it's not), a grade required to sign it, and a grade required
to execute it.
The names and grades are constant.
All these attributes are private and not protected.
The grades of the forms follow the same constraints as the Bureaucrat's
(exceptions, 1 = highest 150 = lowest, and so forth).
There are accessors for the attributes and a << operator to ostream
overload that displays the complete state of the Form.
There is a Form::beSigned() member function that works as described by
the subject.
There is a Bureaucrat::signForm() function that works as described by
the subject.

Exercise 02: No, you need form 28B, not 28C...
As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.

Forms that actually do something
There is a Makefile that compiles using the appropriate flags.
There are concrete forms that comply with the requirements of the
subject (required grades, names and actions).
They must inherit from the abstract AForm class, and should overload the
abstract AForm::execute(Bureaucrat const & executor) method and must work
as specified by the subject.
They take only one parameter in their constructor, which is their target.
There is a Bureaucrat::executeForm(AForm const & form) that works as
specified by the subject.

Exercise 03: At least this beats coffee-making
As usual, there has to be enough tests to prove the program works as expected. If there isn't, do not grade this exercise. If any non-interface class is not in orthodox canonical class form, do not grade this exercise.

Intern
There is a Makefile that compiles using the appropriate flags.
There is an Intern class.
It has a makeForm() function that works as required in the subject.

Good dispatching
The makeForm() function should use other solutions than the if/elseif/else
branchings to manage the creation of Forms.

